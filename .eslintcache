[{"G:\\study materials\\SWE 3.2\\ReactProjects\\LabTasks\\firebase-auth-34\\src\\App.js":"1","G:\\study materials\\SWE 3.2\\ReactProjects\\LabTasks\\firebase-auth-34\\src\\components\\SignUp.js":"2","G:\\study materials\\SWE 3.2\\ReactProjects\\LabTasks\\firebase-auth-34\\src\\index.js":"3","G:\\study materials\\SWE 3.2\\ReactProjects\\LabTasks\\firebase-auth-34\\src\\firebase.js":"4","G:\\study materials\\SWE 3.2\\ReactProjects\\LabTasks\\firebase-auth-34\\src\\contexts\\AuthContext.js":"5","G:\\study materials\\SWE 3.2\\ReactProjects\\LabTasks\\firebase-auth-34\\src\\components\\Login.js":"6","G:\\study materials\\SWE 3.2\\ReactProjects\\LabTasks\\firebase-auth-34\\src\\components\\Dashboard.js":"7","G:\\study materials\\SWE 3.2\\ReactProjects\\LabTasks\\firebase-auth-34\\src\\components\\UpdateProfile.js":"8","G:\\study materials\\SWE 3.2\\ReactProjects\\LabTasks\\firebase-auth-34\\src\\PrivateRoute.js":"9"},{"size":671,"mtime":1610022869221,"results":"10","hashOfConfig":"11"},{"size":2788,"mtime":1610019483585,"results":"12","hashOfConfig":"11"},{"size":341,"mtime":1610019566447,"results":"13","hashOfConfig":"11"},{"size":493,"mtime":1610012589585,"results":"14","hashOfConfig":"11"},{"size":1293,"mtime":1610023635339,"results":"15","hashOfConfig":"11"},{"size":2170,"mtime":1610023262472,"results":"16","hashOfConfig":"11"},{"size":1532,"mtime":1610024919806,"results":"17","hashOfConfig":"11"},{"size":3213,"mtime":1610024275904,"results":"18","hashOfConfig":"11"},{"size":526,"mtime":1610022937458,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"22","usedDeprecatedRules":"23"},"rutugk",{"filePath":"24","messages":"25","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"26","usedDeprecatedRules":"27"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35","usedDeprecatedRules":"27"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"41","messages":"42","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"G:\\study materials\\SWE 3.2\\ReactProjects\\LabTasks\\firebase-auth-34\\src\\App.js",["46","47"],"import React from \"react\";\nimport SignUp from './components/SignUp';\nimport LogIn from './components/Login';\nimport {BrowserRouter, Link, Route, Switch} from \"react-router-dom\";\nimport Dashboard from \"./components/Dashboard\";\nimport UpdateProfile from \"./components/UpdateProfile\";\nimport PrivateRoute from \"./PrivateRoute\";\n\nfunction App() {\n  return (\n    <BrowserRouter >\n     <PrivateRoute path ='/' exact component ={Dashboard}/>\n     <Route path ='/login' exact component ={LogIn}/>\n     <Route path ='/signup' exact component ={SignUp}/>\n     <PrivateRoute path ='/updateprofile' exact component ={UpdateProfile}/>\n    </BrowserRouter>\n  );\n}\n\nexport default App;\n",["48","49"],"G:\\study materials\\SWE 3.2\\ReactProjects\\LabTasks\\firebase-auth-34\\src\\components\\SignUp.js",["50"],"import React, { useRef, useState } from \"react\";\r\nimport { Button, Card, Form, Alert, Container } from \"react-bootstrap\";\r\nimport { useAuth } from \"./../contexts/AuthContext\";\r\nimport {Link , useHistory} from 'react-router-dom';\r\n\r\nconst SignUp = () => {\r\n  const nameRef = useRef();\r\n  const emailRef = useRef();\r\n  const passwordRef = useRef();\r\n  const confirmPasswordRef = useRef();\r\n\r\n  const history= useHistory();\r\n\r\n  const [error, setError] = useState(\"\");\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  const { signup } = useAuth();\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n    if (passwordRef.current.value != confirmPasswordRef.current.value) {\r\n      return setError(\"password do not match!\");\r\n    }\r\n    try {\r\n      setLoading(true);\r\n      setError(\"\");\r\n      await signup(emailRef.current.value, passwordRef.current.value);\r\n      history.push(\"/\");\r\n    } catch (error) {\r\n      setError(error);\r\n    }\r\n    setLoading(false);\r\n  };\r\n\r\n  return (\r\n    <Container\r\n      className=\"d-flex align-items-center justify-content-center\"\r\n      style={{ minHeight: \"100vh\" }}\r\n    >\r\n      <div className=\"w-100\" style={{ maxWidth: \"400px\" }}>\r\n        <Card>\r\n          <Card.Body>\r\n            <h2 className=\"text-center mb-4\">Sign Up</h2>\r\n\r\n            {error ? (\r\n              <Alert variant=\"danger\"> {JSON.stringify(error)} </Alert>\r\n            ) : (\r\n              \" \"\r\n            )}\r\n\r\n            <Form onSubmit={handleSubmit}>\r\n              <Form.Group id=\"name\">\r\n                <Form.Label>Name</Form.Label>\r\n                <Form.Control ref={nameRef} type=\"text\" required />\r\n              </Form.Group>\r\n\r\n              <Form.Group id=\"email\">\r\n                <Form.Label>Email</Form.Label>\r\n                <Form.Control ref={emailRef} type=\"email\" required />\r\n              </Form.Group>\r\n\r\n              <Form.Group id=\"password\">\r\n                <Form.Label>Password</Form.Label>\r\n                <Form.Control ref={passwordRef} type=\"password\" required />\r\n              </Form.Group>\r\n\r\n              <Form.Group id=\"confirm-password\">\r\n                <Form.Label>Confirm Password</Form.Label>\r\n                <Form.Control\r\n                  ref={confirmPasswordRef}\r\n                  type=\"password\"\r\n                  required\r\n                />\r\n              </Form.Group>\r\n\r\n              <Button disabled={loading} className=\"w-100\" type=\"submit\">\r\n                {\" \"}\r\n                Sign Up\r\n              </Button>\r\n            </Form>\r\n          </Card.Body>\r\n        </Card>\r\n\r\n        <div className=\"w-100 text-center mt-2\">\r\n          Already have an account?\r\n          <Link to= '/login'> Login! </Link>\r\n        </div>\r\n      </div>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default SignUp;\r\n",["51","52"],"G:\\study materials\\SWE 3.2\\ReactProjects\\LabTasks\\firebase-auth-34\\src\\index.js",[],"G:\\study materials\\SWE 3.2\\ReactProjects\\LabTasks\\firebase-auth-34\\src\\firebase.js",[],["53","54"],"G:\\study materials\\SWE 3.2\\ReactProjects\\LabTasks\\firebase-auth-34\\src\\contexts\\AuthContext.js",["55"],"import React, { useState, useEffect, useContext } from \"react\";\r\nimport { propTypes } from \"react-bootstrap/esm/Image\";\r\nimport { auth } from \"./../firebase\";\r\n\r\nconst AuthContext = React.createContext();\r\n\r\nconst useAuth = () => {\r\n  return useContext(AuthContext);\r\n};\r\n\r\nconst AuthProvider = (props) => {\r\n  const [currentUser, setCurrentUser] = useState({});\r\n  const signup = (email, password) => {\r\n    return auth.createUserWithEmailAndPassword(email, password);\r\n  };\r\n\r\n  const login = (email, password) => {\r\n    return auth.signInWithEmailAndPassword(email, password);\r\n  };\r\n  const logout = () => {\r\n    return auth.signOut();\r\n  };\r\n\r\n  const updateEmail=(email)=>{\r\n    return currentUser.updateEmail(email);\r\n  };\r\n\r\n  const updatePassword=(password)=>{\r\n    return currentUser.updatePassword(password);\r\n  };\r\n\r\n\r\n  useEffect(() => {\r\n    const unsubscribe = auth.onAuthStateChanged((user) => {\r\n      setCurrentUser(user);\r\n    });\r\n    return unsubscribe;\r\n  }, []);\r\n  return (\r\n    <AuthContext.Provider\r\n      value={{\r\n        currentUser,\r\n        signup,\r\n        login,\r\n        logout,\r\n        updateEmail,\r\n        updatePassword,\r\n\r\n      }}\r\n    >\r\n      {props.children}\r\n    </AuthContext.Provider>\r\n  );\r\n};\r\n\r\nexport { AuthContext, AuthProvider, useAuth };\r\n","G:\\study materials\\SWE 3.2\\ReactProjects\\LabTasks\\firebase-auth-34\\src\\components\\Login.js",["56"],"import React, { useRef, useState } from \"react\";\r\nimport { Button, Card, Form, Alert, Container } from \"react-bootstrap\";\r\nimport { useAuth } from \"./../contexts/AuthContext\";\r\nimport {Link, useHistory } from 'react-router-dom';\r\n\r\nconst LogIn = () => {\r\n  const nameRef = useRef();\r\n  const emailRef = useRef();\r\n  const passwordRef = useRef();\r\n\r\n  const history= useHistory();\r\n  \r\n\r\n  const [error, setError] = useState(\"\");\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  const { login } = useAuth();\r\n\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n   \r\n    try {\r\n      setLoading(true);\r\n      setError(\"\");\r\n      await login(emailRef.current.value, passwordRef.current.value);\r\n      history.push(\"/\");\r\n    } catch (error) {\r\n      setError(error);\r\n    }\r\n    setLoading(false);\r\n  };\r\n\r\n  return (\r\n    <Container\r\n      className=\"d-flex align-items-center justify-content-center\"\r\n      style={{ minHeight: \"100vh\" }}\r\n    >\r\n      <div className=\"w-100\" style={{ maxWidth: \"400px\" }}>\r\n        <Card>\r\n          <Card.Body>\r\n            <h2 className=\"text-center mb-4\">Log In</h2>\r\n\r\n            {error ? (\r\n              <Alert variant=\"danger\"> {JSON.stringify(error)} </Alert>\r\n            ) : (\r\n              \" \"\r\n            )}\r\n\r\n            <Form onSubmit={handleSubmit}>\r\n              \r\n\r\n              <Form.Group id=\"email\">\r\n                <Form.Label>Email</Form.Label>\r\n                <Form.Control ref={emailRef} type=\"email\" required />\r\n              </Form.Group>\r\n\r\n              <Form.Group id=\"password\">\r\n                <Form.Label>Password</Form.Label>\r\n                <Form.Control ref={passwordRef} type=\"password\" required />\r\n              </Form.Group>\r\n\r\n            \r\n\r\n              <Button disabled={loading} className=\"w-100\" type=\"submit\">\r\n                {\" \"}\r\n                Log In\r\n              </Button>\r\n            </Form>\r\n          </Card.Body>\r\n        </Card>\r\n\r\n        <div className=\"w-100 text-center mt-2\">\r\n          Don't have an account? \r\n          <Link to='/signup'> SignUp!</Link>\r\n        </div>\r\n      </div>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default LogIn;","G:\\study materials\\SWE 3.2\\ReactProjects\\LabTasks\\firebase-auth-34\\src\\components\\Dashboard.js",["57"],"G:\\study materials\\SWE 3.2\\ReactProjects\\LabTasks\\firebase-auth-34\\src\\components\\UpdateProfile.js",["58","59"],"import React, { useRef, useState } from \"react\";\r\nimport { Button, Card, Form, Alert, Container } from \"react-bootstrap\";\r\nimport { useAuth } from \"./../contexts/AuthContext\";\r\nimport {Link , useHistory} from 'react-router-dom';\r\n\r\nconst UpdateProfile = () => {\r\n  const nameRef = useRef();\r\n  const emailRef = useRef();\r\n  const passwordRef = useRef();\r\n  const confirmPasswordRef = useRef();\r\n\r\n  const history= useHistory();\r\n\r\n  const [error, setError] = useState(\"\");\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  const { updateEmail, updatePassword , currentUser } = useAuth();\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n    if (passwordRef.current.value != confirmPasswordRef.current.value) {\r\n      return setError(\"password do not match!\");\r\n    }\r\n   \r\n      setLoading(true);\r\n      setError(\"\");\r\n      const promises=[]\r\n      if(emailRef.current.value!= currentUser.email){\r\n          promises.push(updateEmail(emailRef.current.value));\r\n\r\n\r\n      }\r\n      if(passwordRef.current.value){\r\n        promises.push(updatePassword(passwordRef.current.value));\r\n\r\n      };\r\n      Promise.all(promises).then(()=>{\r\n          history.push('/');\r\n      }).catch((error)=>{\r\n          setError(error);\r\n      }).finally(()=>{\r\n         setLoading(false); \r\n      })\r\n   \r\n  };\r\n\r\n  return (\r\n    <Container\r\n      className=\"d-flex align-items-center justify-content-center\"\r\n      style={{ minHeight: \"100vh\" }}\r\n    >\r\n      <div className=\"w-100\" style={{ maxWidth: \"400px\" }}>\r\n        <Card>\r\n          <Card.Body>\r\n            <h2 className=\"text-center mb-4\">Sign Up</h2>\r\n\r\n            {error ? (\r\n              <Alert variant=\"danger\"> {JSON.stringify(error)} </Alert>\r\n            ) : (\r\n              \" \"\r\n            )}\r\n\r\n            <Form onSubmit={handleSubmit}>\r\n              <Form.Group id=\"name\">\r\n                <Form.Label>Name</Form.Label>\r\n                <Form.Control ref={nameRef} type=\"text\"  />\r\n              </Form.Group>\r\n\r\n              <Form.Group id=\"email\">\r\n                <Form.Label>Email</Form.Label>\r\n                <Form.Control ref={emailRef} type=\"email\" required defaultValue={currentUser.email}/>\r\n              </Form.Group>\r\n\r\n              <Form.Group id=\"password\">\r\n                <Form.Label>Password</Form.Label>\r\n                <Form.Control ref={passwordRef} type=\"password\" placeholder=\"Leave blank to keep the same password.\"/>\r\n              </Form.Group>\r\n\r\n              <Form.Group id=\"confirm-password\">\r\n                <Form.Label>Confirm Password</Form.Label>\r\n                <Form.Control\r\n                  ref={confirmPasswordRef}\r\n                  type=\"password\"\r\n                  placeholder=\"Leave blank to keep the same password.\"\r\n                />\r\n              </Form.Group>\r\n\r\n              <Button disabled={loading} className=\"w-100\" type=\"submit\">\r\n                Update Profile\r\n              </Button>\r\n            </Form>\r\n          </Card.Body>\r\n        </Card>\r\n\r\n        <div className=\"w-100 text-center mt-2\">\r\n          Already have an account?\r\n          <Link to= ''> cancel! </Link>\r\n        </div>\r\n      </div>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default UpdateProfile ;\r\n","G:\\study materials\\SWE 3.2\\ReactProjects\\LabTasks\\firebase-auth-34\\src\\PrivateRoute.js",[],{"ruleId":"60","severity":1,"message":"61","line":4,"column":24,"nodeType":"62","messageId":"63","endLine":4,"endColumn":28},{"ruleId":"60","severity":1,"message":"64","line":4,"column":37,"nodeType":"62","messageId":"63","endLine":4,"endColumn":43},{"ruleId":"65","replacedBy":"66"},{"ruleId":"67","replacedBy":"68"},{"ruleId":"69","severity":1,"message":"70","line":20,"column":35,"nodeType":"71","messageId":"72","endLine":20,"endColumn":37},{"ruleId":"65","replacedBy":"73"},{"ruleId":"67","replacedBy":"74"},{"ruleId":"65","replacedBy":"75"},{"ruleId":"67","replacedBy":"76"},{"ruleId":"60","severity":1,"message":"77","line":2,"column":10,"nodeType":"62","messageId":"63","endLine":2,"endColumn":19},{"ruleId":"60","severity":1,"message":"78","line":7,"column":9,"nodeType":"62","messageId":"63","endLine":7,"endColumn":16},{"ruleId":"60","severity":1,"message":"79","line":2,"column":24,"nodeType":"62","messageId":"63","endLine":2,"endColumn":28},{"ruleId":"69","severity":1,"message":"70","line":20,"column":35,"nodeType":"71","messageId":"72","endLine":20,"endColumn":37},{"ruleId":"69","severity":1,"message":"70","line":27,"column":32,"nodeType":"71","messageId":"72","endLine":27,"endColumn":34},"no-unused-vars","'Link' is defined but never used.","Identifier","unusedVar","'Switch' is defined but never used.","no-native-reassign",["80"],"no-negated-in-lhs",["81"],"eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected",["80"],["81"],["80"],["81"],"'propTypes' is defined but never used.","'nameRef' is assigned a value but never used.","'Form' is defined but never used.","no-global-assign","no-unsafe-negation"]